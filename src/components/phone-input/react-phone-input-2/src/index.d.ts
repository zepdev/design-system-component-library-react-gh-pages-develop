export default PhoneInput;
declare class PhoneInput extends React.Component<any, any, any> {
    static propTypes: {
        country: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        value: PropTypes.Requireable<string>;
        onlyCountries: PropTypes.Requireable<(string | null | undefined)[]>;
        preferredCountries: PropTypes.Requireable<(string | null | undefined)[]>;
        excludeCountries: PropTypes.Requireable<(string | null | undefined)[]>;
        placeholder: PropTypes.Requireable<string>;
        searchPlaceholder: PropTypes.Requireable<string>;
        searchNotFound: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        containerStyle: PropTypes.Requireable<object>;
        inputStyle: PropTypes.Requireable<object>;
        buttonStyle: PropTypes.Requireable<object>;
        dropdownStyle: PropTypes.Requireable<object>;
        searchStyle: PropTypes.Requireable<object>;
        containerClass: PropTypes.Requireable<string>;
        inputClass: PropTypes.Requireable<string>;
        buttonClass: PropTypes.Requireable<string>;
        dropdownClass: PropTypes.Requireable<string>;
        searchClass: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        autoFormat: PropTypes.Requireable<boolean>;
        enableAreaCodes: PropTypes.Requireable<NonNullable<boolean | (string | null | undefined)[] | null | undefined>>;
        enableTerritories: PropTypes.Requireable<NonNullable<boolean | (string | null | undefined)[] | null | undefined>>;
        disableCountryCode: PropTypes.Requireable<boolean>;
        disableDropdown: PropTypes.Requireable<boolean>;
        enableLongNumbers: PropTypes.Requireable<NonNullable<number | boolean | null | undefined>>;
        countryCodeEditable: PropTypes.Requireable<boolean>;
        enableSearch: PropTypes.Requireable<boolean>;
        disableSearchIcon: PropTypes.Requireable<boolean>;
        disableInitialCountryGuess: PropTypes.Requireable<boolean>;
        disableCountryGuess: PropTypes.Requireable<boolean>;
        regions: PropTypes.Requireable<NonNullable<string | (string | null | undefined)[] | null | undefined>>;
        inputProps: PropTypes.Requireable<object>;
        localization: PropTypes.Requireable<object>;
        masks: PropTypes.Requireable<object>;
        areaCodes: PropTypes.Requireable<object>;
        preserveOrder: PropTypes.Requireable<(string | null | undefined)[]>;
        defaultMask: PropTypes.Requireable<string>;
        alwaysDefaultMask: PropTypes.Requireable<boolean>;
        prefix: PropTypes.Requireable<string>;
        copyNumbersOnly: PropTypes.Requireable<boolean>;
        renderStringAsFlag: PropTypes.Requireable<string>;
        autocompleteSearch: PropTypes.Requireable<boolean>;
        jumpCursorToEnd: PropTypes.Requireable<boolean>;
        priority: PropTypes.Requireable<object>;
        enableAreaCodeStretch: PropTypes.Requireable<boolean>;
        enableClickOutside: PropTypes.Requireable<boolean>;
        showDropdown: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onEnterKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
        onMount: PropTypes.Requireable<(...args: any[]) => any>;
        isValid: PropTypes.Requireable<NonNullable<boolean | ((...args: any[]) => any) | null | undefined>>;
        defaultErrorMessage: PropTypes.Requireable<string>;
        specialLabel: PropTypes.Requireable<string>;
    };
    static defaultProps: {
        country: string;
        value: string;
        onlyCountries: never[];
        preferredCountries: never[];
        excludeCountries: never[];
        placeholder: string;
        searchPlaceholder: string;
        searchNotFound: string;
        flagsImagePath: string;
        disabled: boolean;
        containerStyle: {};
        inputStyle: {};
        buttonStyle: {};
        dropdownStyle: {};
        searchStyle: {};
        containerClass: string;
        inputClass: string;
        buttonClass: string;
        dropdownClass: string;
        searchClass: string;
        className: string;
        autoFormat: boolean;
        enableAreaCodes: boolean;
        enableTerritories: boolean;
        disableCountryCode: boolean;
        disableDropdown: boolean;
        enableLongNumbers: boolean;
        countryCodeEditable: boolean;
        enableSearch: boolean;
        disableSearchIcon: boolean;
        disableInitialCountryGuess: boolean;
        disableCountryGuess: boolean;
        regions: string;
        inputProps: {};
        localization: {};
        masks: null;
        priority: null;
        areaCodes: null;
        preserveOrder: never[];
        defaultMask: string;
        alwaysDefaultMask: boolean;
        prefix: string;
        copyNumbersOnly: boolean;
        renderStringAsFlag: string;
        autocompleteSearch: boolean;
        jumpCursorToEnd: boolean;
        enableAreaCodeStretch: boolean;
        enableClickOutside: boolean;
        showDropdown: boolean;
        isValid: boolean;
        defaultErrorMessage: string;
        specialLabel: string;
        onEnterKeyPress: null;
        keys: {
            UP: number;
            DOWN: number;
            RIGHT: number;
            LEFT: number;
            ENTER: number;
            ESC: number;
            PLUS: number;
            A: number;
            Z: number;
            SPACE: number;
            TAB: number;
        };
    };
    constructor(props: any);
    state: {
        showDropdown: any;
        formattedNumber: any;
        onlyCountries: any;
        preferredCountries: any;
        hiddenAreaCodes: any;
        selectedCountry: any;
        highlightCountryIndex: any;
        queryString: string;
        freezeSelection: boolean;
        debouncedQueryStingSearcher: any;
        searchValue: string;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: any, prevState: any, snapshot: any): void;
    getProbableCandidate: any;
    guessSelectedCountry: any;
    updateCountry: (country: any) => void;
    updateFormattedNumber(value: any): void;
    scrollTo: (country: any, middle: any) => void;
    scrollToTop: () => void;
    formatNumber: (text: any, country: any) => any;
    cursorToEnd: () => void;
    getElement: (index: any) => any;
    getCountryData: () => {
        name?: undefined;
        dialCode?: undefined;
        countryCode?: undefined;
        format?: undefined;
    } | {
        name: any;
        dialCode: any;
        countryCode: any;
        format: any;
    };
    handleFlagDropdownClick: (e: any) => void;
    handleInput: (e: any) => void;
    handleInputClick: (e: any) => void;
    handleDoubleClick: (e: any) => void;
    handleFlagItemClick: (country: any, e: any) => void;
    handleInputFocus: (e: any) => void;
    handleInputBlur: (e: any) => void;
    handleInputCopy: (e: any) => void;
    getHighlightCountryIndex: (direction: any) => any;
    searchCountry: () => void;
    handleKeydown: (e: any) => any;
    handleInputKeyDown: (e: any) => void;
    handleClickOutside: (e: any) => void;
    handleSearchChange: (e: any) => void;
    concatPreferredCountries: (preferredCountries: any, onlyCountries: any) => any;
    getDropdownCountryName: (country: any) => any;
    getSearchFilteredCountries: () => any;
    getCountryDropdownList: () => import("react/jsx-dev-runtime").JSX.Element;
    dropdownRef: HTMLUListElement | null | undefined;
    render(): import("react/jsx-dev-runtime").JSX.Element;
    dropdownContainerRef: HTMLButtonElement | null | undefined;
    numberInputRef: HTMLInputElement | null | undefined;
}
import React from 'react';
import PropTypes from 'prop-types';
//# sourceMappingURL=index.d.ts.map